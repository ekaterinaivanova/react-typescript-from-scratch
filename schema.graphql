"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""All input for the create `Ingredient` mutation."""
input CreateIngredientInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Ingredient` to be created by this mutation."""
  ingredient: IngredientInput!
}

"""The output of our create `Ingredient` mutation."""
type CreateIngredientPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ingredient` that was created by this mutation."""
  ingredient: Ingredient

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `IngredientType` that is related to this `Ingredient`."""
  ingredientTypeByTypeId: IngredientType

  """An edge for our `Ingredient`. May be used by Relay 1."""
  ingredientEdge(
    """The method to use when ordering `Ingredient`."""
    orderBy: [IngredientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IngredientsEdge
}

"""All input for the create `IngredientType` mutation."""
input CreateIngredientTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `IngredientType` to be created by this mutation."""
  ingredientType: IngredientTypeInput!
}

"""The output of our create `IngredientType` mutation."""
type CreateIngredientTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IngredientType` that was created by this mutation."""
  ingredientType: IngredientType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `IngredientType`. May be used by Relay 1."""
  ingredientTypeEdge(
    """The method to use when ordering `IngredientType`."""
    orderBy: [IngredientTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IngredientTypesEdge
}

"""All input for the create `Recipe` mutation."""
input CreateRecipeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Recipe` to be created by this mutation."""
  recipe: RecipeInput!
}

"""The output of our create `Recipe` mutation."""
type CreateRecipePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Recipe` that was created by this mutation."""
  recipe: Recipe

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Recipe`."""
  userByAuthorId: User

  """An edge for our `Recipe`. May be used by Relay 1."""
  recipeEdge(
    """The method to use when ordering `Recipe`."""
    orderBy: [RecipesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecipesEdge
}

"""All input for the create `RecipesIngredient` mutation."""
input CreateRecipesIngredientInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RecipesIngredient` to be created by this mutation."""
  recipesIngredient: RecipesIngredientInput!
}

"""The output of our create `RecipesIngredient` mutation."""
type CreateRecipesIngredientPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RecipesIngredient` that was created by this mutation."""
  recipesIngredient: RecipesIngredient

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Ingredient` that is related to this `RecipesIngredient`.
  """
  ingredientByIngredientId: Ingredient

  """Reads a single `Recipe` that is related to this `RecipesIngredient`."""
  recipeByRecipeId: Recipe

  """Reads a single `Unit` that is related to this `RecipesIngredient`."""
  unitByUnitId: Unit

  """An edge for our `RecipesIngredient`. May be used by Relay 1."""
  recipesIngredientEdge(
    """The method to use when ordering `RecipesIngredient`."""
    orderBy: [RecipesIngredientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecipesIngredientsEdge
}

"""All input for the create `Unit` mutation."""
input CreateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Unit` to be created by this mutation."""
  unit: UnitInput!
}

"""The output of our create `Unit` mutation."""
type CreateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was created by this mutation."""
  unit: Unit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteIngredientById` mutation."""
input DeleteIngredientByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteIngredient` mutation."""
input DeleteIngredientInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ingredient` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Ingredient` mutation."""
type DeleteIngredientPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ingredient` that was deleted by this mutation."""
  ingredient: Ingredient
  deletedIngredientId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `IngredientType` that is related to this `Ingredient`."""
  ingredientTypeByTypeId: IngredientType

  """An edge for our `Ingredient`. May be used by Relay 1."""
  ingredientEdge(
    """The method to use when ordering `Ingredient`."""
    orderBy: [IngredientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IngredientsEdge
}

"""All input for the `deleteIngredientTypeById` mutation."""
input DeleteIngredientTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteIngredientType` mutation."""
input DeleteIngredientTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IngredientType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `IngredientType` mutation."""
type DeleteIngredientTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IngredientType` that was deleted by this mutation."""
  ingredientType: IngredientType
  deletedIngredientTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `IngredientType`. May be used by Relay 1."""
  ingredientTypeEdge(
    """The method to use when ordering `IngredientType`."""
    orderBy: [IngredientTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IngredientTypesEdge
}

"""All input for the `deleteRecipeById` mutation."""
input DeleteRecipeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteRecipe` mutation."""
input DeleteRecipeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Recipe` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Recipe` mutation."""
type DeleteRecipePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Recipe` that was deleted by this mutation."""
  recipe: Recipe
  deletedRecipeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Recipe`."""
  userByAuthorId: User

  """An edge for our `Recipe`. May be used by Relay 1."""
  recipeEdge(
    """The method to use when ordering `Recipe`."""
    orderBy: [RecipesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecipesEdge
}

"""
All input for the `deleteRecipesIngredientByIngredientIdAndRecipeId` mutation.
"""
input DeleteRecipesIngredientByIngredientIdAndRecipeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ingredientId: UUID!
  recipeId: UUID!
}

"""All input for the `deleteRecipesIngredient` mutation."""
input DeleteRecipesIngredientInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RecipesIngredient` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RecipesIngredient` mutation."""
type DeleteRecipesIngredientPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RecipesIngredient` that was deleted by this mutation."""
  recipesIngredient: RecipesIngredient
  deletedRecipesIngredientId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Ingredient` that is related to this `RecipesIngredient`.
  """
  ingredientByIngredientId: Ingredient

  """Reads a single `Recipe` that is related to this `RecipesIngredient`."""
  recipeByRecipeId: Recipe

  """Reads a single `Unit` that is related to this `RecipesIngredient`."""
  unitByUnitId: Unit

  """An edge for our `RecipesIngredient`. May be used by Relay 1."""
  recipesIngredientEdge(
    """The method to use when ordering `RecipesIngredient`."""
    orderBy: [RecipesIngredientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecipesIngredientsEdge
}

"""All input for the `deleteUnitById` mutation."""
input DeleteUnitByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUnit` mutation."""
input DeleteUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Unit` mutation."""
type DeleteUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was deleted by this mutation."""
  unit: Unit
  deletedUnitId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""Ingredients used in recipes."""
type Ingredient implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  typeId: UUID

  """Reads a single `IngredientType` that is related to this `Ingredient`."""
  ingredientTypeByTypeId: IngredientType

  """Reads and enables pagination through a set of `RecipesIngredient`."""
  recipesIngredientsByIngredientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecipesIngredient`."""
    orderBy: [RecipesIngredientsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecipesIngredientCondition
  ): RecipesIngredientsConnection!
}

"""
A condition to be used against `Ingredient` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input IngredientCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: UUID
}

"""An input for mutations affecting `Ingredient`"""
input IngredientInput {
  id: UUID
  name: String!
  typeId: UUID
}

"""
Represents an update to a `Ingredient`. Fields that are set will be updated.
"""
input IngredientPatch {
  id: UUID
  name: String
  typeId: UUID
}

"""A connection to a list of `Ingredient` values."""
type IngredientsConnection {
  """A list of `Ingredient` objects."""
  nodes: [Ingredient]!

  """
  A list of edges which contains the `Ingredient` and cursor to aid in pagination.
  """
  edges: [IngredientsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Ingredient` you could get from the connection."""
  totalCount: Int!
}

"""A `Ingredient` edge in the connection."""
type IngredientsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Ingredient` at the end of the edge."""
  node: Ingredient
}

"""Methods to use when ordering `Ingredient`."""
enum IngredientsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""ingredient types like fruites vegetables."""
type IngredientType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  description: String

  """Reads and enables pagination through a set of `Ingredient`."""
  ingredientsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ingredient`."""
    orderBy: [IngredientsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngredientCondition
  ): IngredientsConnection!
}

"""
A condition to be used against `IngredientType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input IngredientTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `IngredientType`"""
input IngredientTypeInput {
  id: UUID
  name: String!
  description: String
}

"""
Represents an update to a `IngredientType`. Fields that are set will be updated.
"""
input IngredientTypePatch {
  id: UUID
  name: String
  description: String
}

"""A connection to a list of `IngredientType` values."""
type IngredientTypesConnection {
  """A list of `IngredientType` objects."""
  nodes: [IngredientType]!

  """
  A list of edges which contains the `IngredientType` and cursor to aid in pagination.
  """
  edges: [IngredientTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `IngredientType` you could get from the connection."""
  totalCount: Int!
}

"""A `IngredientType` edge in the connection."""
type IngredientTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IngredientType` at the end of the edge."""
  node: IngredientType
}

"""Methods to use when ordering `IngredientType`."""
enum IngredientTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `IngredientType`."""
  createIngredientType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIngredientTypeInput!
  ): CreateIngredientTypePayload

  """Creates a single `Ingredient`."""
  createIngredient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIngredientInput!
  ): CreateIngredientPayload

  """Creates a single `Recipe`."""
  createRecipe(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRecipeInput!
  ): CreateRecipePayload

  """Creates a single `RecipesIngredient`."""
  createRecipesIngredient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRecipesIngredientInput!
  ): CreateRecipesIngredientPayload

  """Creates a single `Unit`."""
  createUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUnitInput!
  ): CreateUnitPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `IngredientType` using its globally unique id and a patch.
  """
  updateIngredientType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIngredientTypeInput!
  ): UpdateIngredientTypePayload

  """Updates a single `IngredientType` using a unique key and a patch."""
  updateIngredientTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIngredientTypeByIdInput!
  ): UpdateIngredientTypePayload

  """
  Updates a single `Ingredient` using its globally unique id and a patch.
  """
  updateIngredient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIngredientInput!
  ): UpdateIngredientPayload

  """Updates a single `Ingredient` using a unique key and a patch."""
  updateIngredientById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIngredientByIdInput!
  ): UpdateIngredientPayload

  """Updates a single `Recipe` using its globally unique id and a patch."""
  updateRecipe(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRecipeInput!
  ): UpdateRecipePayload

  """Updates a single `Recipe` using a unique key and a patch."""
  updateRecipeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRecipeByIdInput!
  ): UpdateRecipePayload

  """
  Updates a single `RecipesIngredient` using its globally unique id and a patch.
  """
  updateRecipesIngredient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRecipesIngredientInput!
  ): UpdateRecipesIngredientPayload

  """Updates a single `RecipesIngredient` using a unique key and a patch."""
  updateRecipesIngredientByIngredientIdAndRecipeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRecipesIngredientByIngredientIdAndRecipeIdInput!
  ): UpdateRecipesIngredientPayload

  """Updates a single `Unit` using its globally unique id and a patch."""
  updateUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitInput!
  ): UpdateUnitPayload

  """Updates a single `Unit` using a unique key and a patch."""
  updateUnitById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitByIdInput!
  ): UpdateUnitPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Deletes a single `IngredientType` using its globally unique id."""
  deleteIngredientType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIngredientTypeInput!
  ): DeleteIngredientTypePayload

  """Deletes a single `IngredientType` using a unique key."""
  deleteIngredientTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIngredientTypeByIdInput!
  ): DeleteIngredientTypePayload

  """Deletes a single `Ingredient` using its globally unique id."""
  deleteIngredient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIngredientInput!
  ): DeleteIngredientPayload

  """Deletes a single `Ingredient` using a unique key."""
  deleteIngredientById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIngredientByIdInput!
  ): DeleteIngredientPayload

  """Deletes a single `Recipe` using its globally unique id."""
  deleteRecipe(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRecipeInput!
  ): DeleteRecipePayload

  """Deletes a single `Recipe` using a unique key."""
  deleteRecipeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRecipeByIdInput!
  ): DeleteRecipePayload

  """Deletes a single `RecipesIngredient` using its globally unique id."""
  deleteRecipesIngredient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRecipesIngredientInput!
  ): DeleteRecipesIngredientPayload

  """Deletes a single `RecipesIngredient` using a unique key."""
  deleteRecipesIngredientByIngredientIdAndRecipeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRecipesIngredientByIngredientIdAndRecipeIdInput!
  ): DeleteRecipesIngredientPayload

  """Deletes a single `Unit` using its globally unique id."""
  deleteUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitInput!
  ): DeleteUnitPayload

  """Deletes a single `Unit` using a unique key."""
  deleteUnitById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitByIdInput!
  ): DeleteUnitPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `IngredientType`."""
  allIngredientTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IngredientType`."""
    orderBy: [IngredientTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngredientTypeCondition
  ): IngredientTypesConnection

  """Reads and enables pagination through a set of `Ingredient`."""
  allIngredients(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ingredient`."""
    orderBy: [IngredientsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngredientCondition
  ): IngredientsConnection

  """Reads and enables pagination through a set of `Recipe`."""
  allRecipes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Recipe`."""
    orderBy: [RecipesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecipeCondition
  ): RecipesConnection

  """Reads and enables pagination through a set of `RecipesIngredient`."""
  allRecipesIngredients(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecipesIngredient`."""
    orderBy: [RecipesIngredientsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecipesIngredientCondition
  ): RecipesIngredientsConnection

  """Reads and enables pagination through a set of `Unit`."""
  allUnits(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition
  ): UnitsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  ingredientTypeById(id: UUID!): IngredientType
  ingredientById(id: UUID!): Ingredient
  recipeById(id: UUID!): Recipe
  recipesIngredientByIngredientIdAndRecipeId(ingredientId: UUID!, recipeId: UUID!): RecipesIngredient
  unitById(id: UUID!): Unit
  userById(id: UUID!): User

  """Reads a single `IngredientType` using its globally unique `ID`."""
  ingredientType(
    """
    The globally unique `ID` to be used in selecting a single `IngredientType`.
    """
    nodeId: ID!
  ): IngredientType

  """Reads a single `Ingredient` using its globally unique `ID`."""
  ingredient(
    """
    The globally unique `ID` to be used in selecting a single `Ingredient`.
    """
    nodeId: ID!
  ): Ingredient

  """Reads a single `Recipe` using its globally unique `ID`."""
  recipe(
    """The globally unique `ID` to be used in selecting a single `Recipe`."""
    nodeId: ID!
  ): Recipe

  """Reads a single `RecipesIngredient` using its globally unique `ID`."""
  recipesIngredient(
    """
    The globally unique `ID` to be used in selecting a single `RecipesIngredient`.
    """
    nodeId: ID!
  ): RecipesIngredient

  """Reads a single `Unit` using its globally unique `ID`."""
  unit(
    """The globally unique `ID` to be used in selecting a single `Unit`."""
    nodeId: ID!
  ): Unit

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""Recipess written by a user."""
type Recipe implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String!
  content: JSON!
  createdDate: Datetime
  authorId: UUID!

  """Reads a single `User` that is related to this `Recipe`."""
  userByAuthorId: User

  """Reads and enables pagination through a set of `RecipesIngredient`."""
  recipesIngredientsByRecipeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecipesIngredient`."""
    orderBy: [RecipesIngredientsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecipesIngredientCondition
  ): RecipesIngredientsConnection!
}

"""
A condition to be used against `Recipe` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RecipeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID
}

"""An input for mutations affecting `Recipe`"""
input RecipeInput {
  id: UUID
  title: String!
  content: JSON!
  createdDate: Datetime
  authorId: UUID!
}

"""
Represents an update to a `Recipe`. Fields that are set will be updated.
"""
input RecipePatch {
  id: UUID
  title: String
  content: JSON
  createdDate: Datetime
  authorId: UUID
}

"""A connection to a list of `Recipe` values."""
type RecipesConnection {
  """A list of `Recipe` objects."""
  nodes: [Recipe]!

  """
  A list of edges which contains the `Recipe` and cursor to aid in pagination.
  """
  edges: [RecipesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Recipe` you could get from the connection."""
  totalCount: Int!
}

"""A `Recipe` edge in the connection."""
type RecipesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Recipe` at the end of the edge."""
  node: Recipe
}

"""Ingredients recipes connection."""
type RecipesIngredient implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ingredientId: UUID!
  recipeId: UUID!
  quantity: Int
  unitId: UUID

  """
  Reads a single `Ingredient` that is related to this `RecipesIngredient`.
  """
  ingredientByIngredientId: Ingredient

  """Reads a single `Recipe` that is related to this `RecipesIngredient`."""
  recipeByRecipeId: Recipe

  """Reads a single `Unit` that is related to this `RecipesIngredient`."""
  unitByUnitId: Unit
}

"""
A condition to be used against `RecipesIngredient` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RecipesIngredientCondition {
  """Checks for equality with the object’s `ingredientId` field."""
  ingredientId: UUID

  """Checks for equality with the object’s `recipeId` field."""
  recipeId: UUID

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """Checks for equality with the object’s `unitId` field."""
  unitId: UUID
}

"""An input for mutations affecting `RecipesIngredient`"""
input RecipesIngredientInput {
  ingredientId: UUID!
  recipeId: UUID!
  quantity: Int
  unitId: UUID
}

"""
Represents an update to a `RecipesIngredient`. Fields that are set will be updated.
"""
input RecipesIngredientPatch {
  ingredientId: UUID
  recipeId: UUID
  quantity: Int
  unitId: UUID
}

"""A connection to a list of `RecipesIngredient` values."""
type RecipesIngredientsConnection {
  """A list of `RecipesIngredient` objects."""
  nodes: [RecipesIngredient]!

  """
  A list of edges which contains the `RecipesIngredient` and cursor to aid in pagination.
  """
  edges: [RecipesIngredientsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RecipesIngredient` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RecipesIngredient` edge in the connection."""
type RecipesIngredientsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RecipesIngredient` at the end of the edge."""
  node: RecipesIngredient
}

"""Methods to use when ordering `RecipesIngredient`."""
enum RecipesIngredientsOrderBy {
  NATURAL
  INGREDIENT_ID_ASC
  INGREDIENT_ID_DESC
  RECIPE_ID_ASC
  RECIPE_ID_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  UNIT_ID_ASC
  UNIT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Recipe`."""
enum RecipesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Ingredients quantity units."""
type Unit implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  description: String

  """Reads and enables pagination through a set of `RecipesIngredient`."""
  recipesIngredientsByUnitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecipesIngredient`."""
    orderBy: [RecipesIngredientsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecipesIngredientCondition
  ): RecipesIngredientsConnection!
}

"""
A condition to be used against `Unit` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UnitCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `Unit`"""
input UnitInput {
  id: UUID
  name: String!
  description: String
}

"""Represents an update to a `Unit`. Fields that are set will be updated."""
input UnitPatch {
  id: UUID
  name: String
  description: String
}

"""A connection to a list of `Unit` values."""
type UnitsConnection {
  """A list of `Unit` objects."""
  nodes: [Unit]!

  """
  A list of edges which contains the `Unit` and cursor to aid in pagination.
  """
  edges: [UnitsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection."""
type UnitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""Methods to use when ordering `Unit`."""
enum UnitsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateIngredientById` mutation."""
input UpdateIngredientByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Ingredient` being updated.
  """
  ingredientPatch: IngredientPatch!
  id: UUID!
}

"""All input for the `updateIngredient` mutation."""
input UpdateIngredientInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ingredient` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Ingredient` being updated.
  """
  ingredientPatch: IngredientPatch!
}

"""The output of our update `Ingredient` mutation."""
type UpdateIngredientPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ingredient` that was updated by this mutation."""
  ingredient: Ingredient

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `IngredientType` that is related to this `Ingredient`."""
  ingredientTypeByTypeId: IngredientType

  """An edge for our `Ingredient`. May be used by Relay 1."""
  ingredientEdge(
    """The method to use when ordering `Ingredient`."""
    orderBy: [IngredientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IngredientsEdge
}

"""All input for the `updateIngredientTypeById` mutation."""
input UpdateIngredientTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `IngredientType` being updated.
  """
  ingredientTypePatch: IngredientTypePatch!
  id: UUID!
}

"""All input for the `updateIngredientType` mutation."""
input UpdateIngredientTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IngredientType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `IngredientType` being updated.
  """
  ingredientTypePatch: IngredientTypePatch!
}

"""The output of our update `IngredientType` mutation."""
type UpdateIngredientTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IngredientType` that was updated by this mutation."""
  ingredientType: IngredientType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `IngredientType`. May be used by Relay 1."""
  ingredientTypeEdge(
    """The method to use when ordering `IngredientType`."""
    orderBy: [IngredientTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IngredientTypesEdge
}

"""All input for the `updateRecipeById` mutation."""
input UpdateRecipeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Recipe` being updated.
  """
  recipePatch: RecipePatch!
  id: UUID!
}

"""All input for the `updateRecipe` mutation."""
input UpdateRecipeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Recipe` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Recipe` being updated.
  """
  recipePatch: RecipePatch!
}

"""The output of our update `Recipe` mutation."""
type UpdateRecipePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Recipe` that was updated by this mutation."""
  recipe: Recipe

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Recipe`."""
  userByAuthorId: User

  """An edge for our `Recipe`. May be used by Relay 1."""
  recipeEdge(
    """The method to use when ordering `Recipe`."""
    orderBy: [RecipesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecipesEdge
}

"""
All input for the `updateRecipesIngredientByIngredientIdAndRecipeId` mutation.
"""
input UpdateRecipesIngredientByIngredientIdAndRecipeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RecipesIngredient` being updated.
  """
  recipesIngredientPatch: RecipesIngredientPatch!
  ingredientId: UUID!
  recipeId: UUID!
}

"""All input for the `updateRecipesIngredient` mutation."""
input UpdateRecipesIngredientInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RecipesIngredient` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RecipesIngredient` being updated.
  """
  recipesIngredientPatch: RecipesIngredientPatch!
}

"""The output of our update `RecipesIngredient` mutation."""
type UpdateRecipesIngredientPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RecipesIngredient` that was updated by this mutation."""
  recipesIngredient: RecipesIngredient

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Ingredient` that is related to this `RecipesIngredient`.
  """
  ingredientByIngredientId: Ingredient

  """Reads a single `Recipe` that is related to this `RecipesIngredient`."""
  recipeByRecipeId: Recipe

  """Reads a single `Unit` that is related to this `RecipesIngredient`."""
  unitByUnitId: Unit

  """An edge for our `RecipesIngredient`. May be used by Relay 1."""
  recipesIngredientEdge(
    """The method to use when ordering `RecipesIngredient`."""
    orderBy: [RecipesIngredientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecipesIngredientsEdge
}

"""All input for the `updateUnitById` mutation."""
input UpdateUnitByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  unitPatch: UnitPatch!
  id: UUID!
}

"""All input for the `updateUnit` mutation."""
input UpdateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  unitPatch: UnitPatch!
}

"""The output of our update `Unit` mutation."""
type UpdateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was updated by this mutation."""
  unit: Unit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: UUID!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""Users."""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  firstName: String!
  lastName: String!
  email: String
  createdDate: Datetime

  """Reads and enables pagination through a set of `Recipe`."""
  recipesByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Recipe`."""
    orderBy: [RecipesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecipeCondition
  ): RecipesConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: UUID
  firstName: String!
  lastName: String!
  email: String
  createdDate: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: UUID
  firstName: String
  lastName: String
  email: String
  createdDate: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

